<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Assistant Compass</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            margin: 0;
            padding: 20px;
            background: transparent;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
        }

        /* Container for positioning */
        .assistant-container {
            position: fixed;
            bottom: 24px;
            right: 24px;
            z-index: 1000;
        }

        /* Main container */
        .ai-assistant {
            position: relative;
            width: 120px;
            height: 120px;
            animation: float 6s ease-in-out infinite;
            cursor: pointer;
            transition: transform 0.3s ease;
        }

        .ai-assistant:hover {
            transform: scale(1.05);
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-20px); }
        }

        /* Compass container */
        .compass {
            position: relative;
            width: 100%;
            height: 100%;
            filter: drop-shadow(0 4px 12px rgba(0, 0, 0, 0.1));
        }

        /* Outer ring */
        .outer-ring {
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            background: linear-gradient(135deg, #f3f4f6 0%, #e5e7eb 100%);
            box-shadow: 
                inset 0 1px 3px rgba(0, 0, 0, 0.05),
                0 4px 12px rgba(0, 0, 0, 0.1);
        }

        /* Inner compass */
        .inner-compass {
            position: absolute;
            top: 10px;
            left: 10px;
            right: 10px;
            bottom: 10px;
            border-radius: 50%;
            background: linear-gradient(145deg, #7c3aed 0%, #8b5cf6 50%, #a78bfa 100%);
            box-shadow: inset 0 2px 8px rgba(0, 0, 0, 0.15);
            overflow: hidden;
        }

        /* Compass face */
        .compass-face {
            position: absolute;
            top: 10px;
            left: 10px;
            right: 10px;
            bottom: 10px;
            border-radius: 50%;
            background: linear-gradient(135deg, #fafafb 0%, #f4f4f5 100%);
            display: flex;
            justify-content: center;
            align-items: center;
        }

        /* Tick marks */
        .tick-marks {
            position: absolute;
            width: 100%;
            height: 100%;
        }

        .tick {
            position: absolute;
            width: 2px;
            height: 6px;
            background: #9333ea;
            left: 50%;
            top: 3px;
            transform-origin: center 47px;
            opacity: 0.4;
        }

        /* Star */
        .star-container {
            position: relative;
            width: 70px;
            height: 70px;
            animation: pulse 2s ease-in-out infinite;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        .star {
            position: absolute;
            width: 100%;
            height: 100%;
            animation: rotate 20s linear infinite;
        }

        @keyframes rotate {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Face */
        .face {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 30px;
            height: 30px;
            background: linear-gradient(135deg, #fafafb 0%, #f4f4f5 100%);
            border-radius: 50%;
            z-index: 10;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        }

        .eyes {
            position: absolute;
            top: 8px;
            width: 100%;
            display: flex;
            justify-content: space-around;
            padding: 0 8px;
        }

        .eye {
            width: 4px;
            height: 4px;
            background: #4b5563;
            border-radius: 50%;
            animation: blink 4s infinite;
        }

        @keyframes blink {
            0%, 90%, 100% { transform: scaleY(1); }
            95% { transform: scaleY(0.1); }
        }

        .mouth {
            position: absolute;
            bottom: 7px;
            left: 50%;
            transform: translateX(-50%);
            width: 14px;
            height: 7px;
            border-bottom: 2px solid #4b5563;
            border-radius: 0 0 14px 14px;
        }

        /* Status indicator */
        .status-indicator {
            position: absolute;
            top: 5px;
            right: 5px;
            width: 10px;
            height: 10px;
            background: #8b5cf6;
            border-radius: 50%;
            box-shadow: 0 0 8px rgba(139, 92, 246, 0.4);
            animation: statusPulse 2s ease-in-out infinite;
        }

        @keyframes statusPulse {
            0%, 100% { 
                box-shadow: 0 0 8px rgba(139, 92, 246, 0.4);
                transform: scale(1);
            }
            50% { 
                box-shadow: 0 0 16px rgba(139, 92, 246, 0.6);
                transform: scale(1.1);
            }
        }

        /* Glow effect on hover */
        .ai-assistant:hover .inner-compass {
            box-shadow: 
                inset 0 2px 8px rgba(0, 0, 0, 0.15),
                0 0 20px rgba(139, 92, 246, 0.3);
        }

        /* Interactive states */
        .state-listening .compass::before {
            content: '';
            position: absolute;
            top: -20px;
            left: -20px;
            right: -20px;
            bottom: -20px;
            border-radius: 50%;
            background: radial-gradient(circle, transparent 40%, rgba(139, 92, 246, 0.3) 70%, transparent 100%);
            animation: listeningPulse 1.5s ease-in-out infinite;
            pointer-events: none;
        }

        .state-listening .status-indicator {
            background: #a78bfa;
            animation: listeningDot 0.5s ease-in-out infinite;
        }

        @keyframes listeningPulse {
            0%, 100% { 
                transform: scale(0.8);
                opacity: 0;
            }
            50% { 
                transform: scale(1.2);
                opacity: 1;
            }
        }

        @keyframes listeningDot {
            0%, 100% { 
                transform: scale(1);
                box-shadow: 0 0 8px rgba(167, 139, 250, 0.5);
            }
            50% { 
                transform: scale(1.3);
                box-shadow: 0 0 20px rgba(167, 139, 250, 0.9);
            }
        }

        .state-thinking .star {
            animation: rotate 1s linear infinite;
        }

        .state-thinking .tick {
            animation: tickGlow 2s ease-in-out infinite;
        }

        .state-thinking .status-indicator {
            background: #9333ea;
            animation: thinkingDot 0.3s ease-in-out infinite;
        }

        @keyframes tickGlow {
            0%, 100% { opacity: 0.4; }
            50% { opacity: 0.8; }
        }

        @keyframes thinkingDot {
            0%, 100% { 
                transform: scale(1) rotate(0deg);
                box-shadow: 0 0 8px rgba(147, 51, 234, 0.5);
            }
            50% { 
                transform: scale(1.2) rotate(180deg);
                box-shadow: 0 0 16px rgba(147, 51, 234, 0.9);
            }
        }
    </style>
</head>
<body>
    <div class="assistant-container">
        <div class="ai-assistant" id="assistant">
            <div class="compass">
                <div class="outer-ring"></div>
                <div class="inner-compass">
                    <div class="compass-face">
                        <div class="tick-marks" id="tickMarks"></div>
                        <div class="star-container">
                            <svg class="star" viewBox="0 0 100 100">
                                <defs>
                                    <linearGradient id="starGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                                        <stop offset="0%" style="stop-color:#7c3aed;stop-opacity:1" />
                                        <stop offset="100%" style="stop-color:#8b5cf6;stop-opacity:1" />
                                    </linearGradient>
                                </defs>
                                <path d="M50,15 L58,35 L80,35 L62,48 L70,68 L50,53 L30,68 L38,48 L20,35 L42,35 Z" 
                                      fill="url(#starGradient)" 
                                      stroke="#6b21a8" 
                                      stroke-width="1"
                                      filter="drop-shadow(0 2px 4px rgba(0,0,0,0.15))"/>
                            </svg>
                        </div>
                        <div class="face">
                            <div class="eyes">
                                <div class="eye"></div>
                                <div class="eye"></div>
                            </div>
                            <div class="mouth"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="status-indicator"></div>
        </div>
    </div>

    <script>
        // Generate tick marks
        const tickMarks = document.getElementById('tickMarks');
        for (let i = 0; i < 60; i++) {
            const tick = document.createElement('div');
            tick.className = 'tick';
            tick.style.transform = `rotate(${i * 6}deg)`;
            if (i % 5 === 0) {
                tick.style.height = '12px';
                tick.style.width = '3px';
                tick.style.opacity = '0.8';
            }
            tickMarks.appendChild(tick);
        }

        // State management for integration
        window.setAssistantState = function(state) {
            const assistant = document.getElementById('assistant');
            assistant.className = 'ai-assistant';
            if (state !== 'normal') {
                assistant.classList.add(`state-${state}`);
            }
        }

        // Click handler for opening chat/interaction
        document.getElementById('assistant').addEventListener('click', function() {
            // You can trigger your chat window or interaction here
            console.log('Assistant clicked - open chat interface');
            
            // Visual feedback
            this.style.transform = 'scale(0.95)';
            setTimeout(() => {
                this.style.transform = '';
            }, 150);
        });

        // Example: Auto-set to listening when user starts typing
        // window.addEventListener('userTyping', () => setAssistantState('listening'));
        
        // Example: Set to thinking when processing
        // window.addEventListener('processing', () => setAssistantState('thinking'));
    </script>
</body>
</html>