// 1. UPDATE YOUR SESSION NOTE INTERFACE
// Add to your SessionNoteData interface:
interface SessionNoteData {
  clientId: string;
  therapistId: string;
  title?: string;  // ADD THIS
  content: string;
  appointmentId: string;
  source: string;
  metadata?: SessionNoteMetadata;
}

// 2. ADD STATE FOR THE TITLE IN YOUR COMPONENT
// In CreateSessionNoteModal, add this with other state declarations:
const [sessionNoteTitle, setSessionNoteTitle] = useState<string>('');

// 3. ADD TITLE INPUT FIELD TO THE FORM
// Add this right after the Appointment Section in the "content" tab:
<div className="space-y-2">
  <Label htmlFor="session-title">Session Note Title</Label>
  <Input
    id="session-title"
    placeholder="e.g., 'Progress Review - Week 12' or 'Crisis Intervention Session'"
    value={sessionNoteTitle}
    onChange={(e) => setSessionNoteTitle(e.target.value)}
    className="text-lg font-medium"
  />
  <p className="text-xs text-muted-foreground">
    Optional: Give this session a descriptive title for easy reference
  </p>
</div>

// 4. AUTO-GENERATE TITLE SUGGESTIONS BASED ON CONTENT
// Add this function in your component:
const generateTitleSuggestions = () => {
  const suggestions = [];
  
  // Based on template
  if (selectedTemplate) {
    const template = NOTE_TEMPLATES.find(t => t.id === selectedTemplate);
    suggestions.push(`${template?.name} - ${new Date().toLocaleDateString()}`);
  }
  
  // Based on interventions
  if (selectedInterventions.length > 0) {
    suggestions.push(`${selectedInterventions[0]} Session`);
  }
  
  // Based on risk level
  if (riskLevel === 'high') {
    suggestions.push('Crisis Intervention Session');
  } else if (riskLevel === 'moderate') {
    suggestions.push('Risk Assessment & Safety Planning');
  }
  
  // Based on session number (if you track this)
  suggestions.push(`Session #X - ${clientName}`);
  
  // Based on AI analysis
  if (aiAnalysis?.sessionType) {
    suggestions.push(aiAnalysis.sessionType.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase()));
  }
  
  return suggestions;
};

// 5. ADD TITLE SUGGESTIONS UI
// Add this below the title input:
{sessionNoteTitle === '' && (
  <div className="flex flex-wrap gap-2 mt-2">
    <span className="text-xs text-muted-foreground">Suggestions:</span>
    {generateTitleSuggestions().map((suggestion, idx) => (
      <Badge
        key={idx}
        variant="outline"
        className="cursor-pointer text-xs"
        onClick={() => setSessionNoteTitle(suggestion)}
      >
        {suggestion}
      </Badge>
    ))}
  </div>
)}

// 6. UPDATE THE SUBMIT HANDLER
// In handleSubmit function, include the title:
const sessionNoteData = {
  clientId,
  therapistId: 'e66b8b8e-e7a2-40b9-ae74-00c93ffe503c',
  title: sessionNoteTitle || `Session Note - ${new Date().toLocaleDateString()}`, // ADD THIS
  content: content.trim(),
  appointmentId: appointmentIdToUse,
  source: 'manual',
  metadata,
  // ... rest of the data
};

// 7. RESET TITLE ON FORM RESET
// In resetForm function, add:
setSessionNoteTitle('');

// 8. INCLUDE TITLE IN AUTO-SAVE
// In handleAutoSave function, add sessionNoteTitle to the draftData:
const draftData = {
  sessionNoteTitle,  // ADD THIS
  content,
  // ... rest of draft data
};

// 9. RESTORE TITLE FROM DRAFT
// In loadDraft function, add:
setSessionNoteTitle(draft.sessionNoteTitle || '');

// ============================================
// OPTION 2: EDIT EXISTING SESSION NOTE TITLES
// ============================================

// Create a new component for editing existing session notes:
import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Edit2, Save } from 'lucide-react';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { useToast } from '@/hooks/use-toast';
import { apiRequest } from '@/lib/queryClient';

interface EditSessionNoteTitleModalProps {
  isOpen: boolean;
  onClose: () => void;
  sessionNote: {
    id: string;
    title?: string;
    content: string;
    createdAt: string;
    clientName?: string;
  };
}

export function EditSessionNoteTitleModal({
  isOpen,
  onClose,
  sessionNote
}: EditSessionNoteTitleModalProps) {
  const [title, setTitle] = useState(sessionNote.title || '');
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const updateTitleMutation = useMutation({
    mutationFn: async (newTitle: string) => {
      return apiRequest('PATCH', `/api/session-notes/${sessionNote.id}`, {
        title: newTitle
      });
    },
    onSuccess: () => {
      toast({
        title: "Title Updated",
        description: "Session note title has been updated successfully.",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/session-notes'] });
      onClose();
    },
    onError: () => {
      toast({
        title: "Update Failed",
        description: "Could not update the session note title.",
        variant: "destructive",
      });
    }
  });

  const handleSave = () => {
    if (title.trim()) {
      updateTitleMutation.mutate(title.trim());
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Edit2 className="w-4 h-4" />
            Edit Session Note Title
          </DialogTitle>
        </DialogHeader>
        
        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="edit-title">Title</Label>
            <Input
              id="edit-title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder="Enter a descriptive title..."
              onKeyPress={(e) => {
                if (e.key === 'Enter') {
                  handleSave();
                }
              }}
            />
          </div>
          
          <div className="text-sm text-muted-foreground">
            <p><strong>Client:</strong> {sessionNote.clientName}</p>
            <p><strong>Date:</strong> {new Date(sessionNote.createdAt).toLocaleDateString()}</p>
            <p><strong>Preview:</strong> {sessionNote.content.substring(0, 100)}...</p>
          </div>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={onClose}>
            Cancel
          </Button>
          <Button 
            onClick={handleSave}
            disabled={updateTitleMutation.isPending || !title.trim()}
          >
            <Save className="w-4 h-4 mr-2" />
            Save Title
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

// ============================================
// OPTION 3: INLINE EDIT IN SESSION NOTES LIST
// ============================================

// Add this to your session notes list/table component:
interface SessionNoteRowProps {
  note: SessionNote;
  onUpdate: () => void;
}

export function SessionNoteRow({ note, onUpdate }: SessionNoteRowProps) {
  const [isEditingTitle, setIsEditingTitle] = useState(false);
  const [tempTitle, setTempTitle] = useState(note.title || '');
  const { toast } = useToast();

  const saveTitle = async () => {
    try {
      await apiRequest('PATCH', `/api/session-notes/${note.id}`, {
        title: tempTitle
      });
      setIsEditingTitle(false);
      toast({
        title: "Title Updated",
        description: "Session note title has been saved.",
      });
      onUpdate();
    } catch (error) {
      toast({
        title: "Update Failed",
        description: "Could not save the title.",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="flex items-center gap-2 p-4 border rounded">
      {isEditingTitle ? (
        <div className="flex items-center gap-2 flex-1">
          <Input
            value={tempTitle}
            onChange={(e) => setTempTitle(e.target.value)}
            onBlur={saveTitle}
            onKeyPress={(e) => {
              if (e.key === 'Enter') {
                saveTitle();
              } else if (e.key === 'Escape') {
                setTempTitle(note.title || '');
                setIsEditingTitle(false);
              }
            }}
            autoFocus
            className="flex-1"
          />
          <Button size="sm" onClick={saveTitle}>
            <Save className="w-3 h-3" />
          </Button>
        </div>
      ) : (
        <div className="flex items-center gap-2 flex-1">
          <h3 className="font-medium flex-1">
            {note.title || `Session Note - ${new Date(note.createdAt).toLocaleDateString()}`}
          </h3>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setIsEditingTitle(true)}
          >
            <Edit2 className="w-3 h-3" />
          </Button>
        </div>
      )}
      
      {/* Rest of your session note row content */}
    </div>
  );
}

// ============================================
// API ENDPOINT UPDATES NEEDED
// ============================================

// Your backend needs to support title field:

// 1. Database Schema Update (if using SQL):
/*
ALTER TABLE session_notes 
ADD COLUMN title VARCHAR(255);
*/

// 2. API Endpoint Update:
/*
// POST /api/session-notes
{
  title: string;  // Add this field
  content: string;
  // ... other fields
}

// PATCH /api/session-notes/:id
{
  title?: string;  // Support updating just the title
}
*/

// 3. If using Prisma, update your schema:
/*
model SessionNote {
  id            String   @id @default(cuid())
  title         String?  // Add this line
  content       String
  // ... other fields
}
*/